fans-rt 是一个开源实时操作系统项目(目前只实现了STM32的支持)。 已实现或部分实现的功能包括：任务管理、对象管理、系统级内存管理、IRQ管理、LPC服务管理、进程间通讯管理(EVENT/MUTEX，其他暂未完成)。 系统架构设计支持硬件级双堆栈(提供软件双堆栈)，支持硬件任务切换中断，提供内核特权级保护，提供MPU/MMU支持，但不依赖MPU和MMU。
svn地址:  http://code.taobao.org/svn/fans-rt

一、系统功能
1、任务管理(完成度90%)
提供抢占式任务管理，支持256级优先级，支持1024个任务同时运行，相同优先级采用轮转调度，不同优先级采用抢占调度，调度时间复杂度O1。任务管理提供至多3级位图(256bit)最少1级位图(8bit)描述就绪状态，调度时查表获得最高优先级的就绪任务。支持多种堆栈模型，包括全局内核堆栈、局部内核堆栈，在tiny模式下所有任务使用单堆栈运行，以节约内存空间，其他模式下普通任务采用双堆栈方式以便保护系统内核。
2、系统功能调用管理(完成度100%)
提供内核服务管理，所有内核服务均注册到服务软中断上，在中断上下文中完成服务功能，为减少服务所开销的CPU时间片保证系统实时性提高系统对中断的响应速度，所有内核服务均只提供原子化的单一功能，对于复杂的API调用由API层完成对系统功能的集成和组合，例如创建任务的API功能被划分为任务上下文对象分配、用户堆栈分配、用户堆栈初始化、内核堆栈分配、内核堆栈初始化、局部堆分配、局部变量管理对象分配等一系列原子化的步骤。
3、中断管理(100%)
提供至多256个中断管理，支持共享中断，支持中断优先级抢占。
4、内存管理(完成度50%)
内存采用2级管理，分为系统全局内存管理和应用全局堆管理、任务局部堆管理，系统全局内存管理由MMS服务完成，提供较大的页分配，支持最多8个Region，每个 Region最大64MB，最多可管理512MB内存，所有内存管理活动必须先通过MMS分配。应用全局堆管理由HMS提供，提供较小的块分配，所有任务共享全局堆，全局堆的管理数据和堆空间完全隔离，以防止应用程序缺陷导致问题扩散。局部堆为任务独享，局部堆的分配和释放均在应用层完成。系统支持tiny内存模型 (不编译全局内存管理模块)，内核最小内存需求3KB(1个IDLE任务，1个BOOT任务，以及1KB管理数据)。全局内存和堆的分配和释放均使用Buddy算法。
5、类和对象管理(完成度100%)
提供类和对象管理，允许驱动程序或其他内核模块向系统注册类。对象管理的内存分配采用2级索引方式，相同大小的对象使用一个对象容器(Container)进行管理，每个容器中有若干个池(POOL)，每个POOL中有若干个块(BLOCK)，容器描述符使用最大32BIT的位图描述BLOCK的空闲状态，分配时通过2次查表获得空闲块的ID。系统内核所使用的各种对象(例如任务上下文对象、IPC对象、堆栈对象、局部变量对象等)均由对象管理器统一管理。对象分为命名对象(唯一名称，不可重名)和无名对象。
6、IPC服务(完成度40%)
事件(100%) 互斥体(100%) 信号量(20%) 信号量集(20%) 管道FIFO(0%) 邮箱(0%) 消息队列(0%)
7、内核闹铃(完成度0%)
在系统时钟中断中执行，闹铃分为单次闹铃和周期闹铃。
  单次闹铃：在指定闹铃时间超时后，只闹一次。
  周期闹铃：以指定周期频率回调闹铃函数。
8.任务局部变量(完成度0%)
为任务提供局部变量空间，在创建任务时可根据需求配置所需要的局部变量数量。

二、可选组件
1.设备和驱动管理(DDM)
  提供TINY模式和HUGE模式的设备管理架构
   TINY架构
    以节省内存为目的的简易设备管理架构，提供对设备节点的管理，不提供设备树的管理结构，提供电源管理支持，不提供热拔插支持，适用于64KB以下内存较小的单片机系统。
   HUGE架构
    支持总线(PCI/USB等)架构的设备和驱动管理，提供树形设备管理结构，提供电源管理、热拔插支持，适用于拥有64KB以上内存的系统结构。
2.文件系统(FS)
  提供TINY和HUGE模式的文件管理器
   TINY模式
    以节省内存为目的的建议文件管理功能，不提供数据缓存，文件的读写操作均直接透传设备，节省内存但速度较慢
   HUGE模式
    支持快速的文件访问方式，提供数据缓存，文件的读写操作优先访问缓存。
3.图形用户界面(GUI)
  提供矢量、点阵字体支持(freetype)，提供16/24/32位色彩空间支持，提供bmp/jpeg(libjpeg)以常见图形文件格式支持，内置framebuffer支持，提供图形设备驱动接口，提供窗体管理及常见控件支持。
5.多媒体
  提供MP3播放支持(libmad)。
4.网络通讯(NET)
  提供TCP/IP协议栈，标准NIC接口。
三、源码文件夹介绍

source
├─boot
├─build                     (编译配置文件夹)
│  └─stm32
├─include
│  ├─armcc
│  ├─gcc
│  └─stdc
├─libs
│  ├─libapi                (fans-rt API接口层)
│  ├─libcal                (fans-rt 内核适配层)
│  ├─libcmini              (fans-rt libc基本库)
│  └─libcuser              (fans-rt libc扩展库)
├─loader
├─platform                  (fans-rt 硬件平台适配层)
│  ├─arch                  (fans-rt CPU适配层)
│  │  └─stm32
│  │      ├─arm
│  │      └─gcc
│  ├─board                 (fans-rt 板级支持包)
│  │  ├─8086
│  │  └─stm32             (fans-rt STM32板级支持包)
│  │      ├─huge          (fans-rt huge堆栈/内存模型实例)
│  │      │  ├─armcc
│  │      │  └─gcc
│  │      ├─lite          (fans-rt lite堆栈/内存模型实例)
│  │      │  ├─armcc
│  │      │  └─gcc
│  │      ├─mini          (fans-rt mini堆栈/内存模型实例)
│  │      │  ├─armcc
│  │      │  └─gcc
│  │      └─tiny          (fans-rt mini堆栈/内存模型实例)
│  │          ├─armcc
│  │          └─gcc
│  └─libfw                 (fans-rt 供应商SDK包)
│      └─stm32f10x         (fans-rt STM32芯片供应商SDK支持包)
│          └─compiler
│              ├─arm
│              └─gcc
├─script                    (fans-rt 编译依赖脚本文件夹)
├─system                    (fans-rt 系统组件源代码)
│  ├─core                  (fans-rt 内核源代码)
│  │  └─stack
│  ├─drivers
│  ├─fs
│  └─misc
├─testcode                  (fans-rt 测试源代码)
│  ├─other
│  └─stm32
│      ├─huge
│      │  └─old
│      ├─lite
│      │  └─old
│      ├─mini
│      └─tiny
└─tools
    ├─language
    ├─libelf-0.8.6
    │  ├─lib
    │  ├─po
    │  └─w32
    ├─stm32bin
    │  └─libelf
    └─table
\

二、模块划分
1.libcmini -- libc基本库，提供无任何符号依赖的libc功能，可同时被内核态和用户态调用
2.libcuser -- libc扩展库，为应用程序提供扩展的libc功能，只允许用户态调用，依赖libcal/libcmini/libapi
3.libcal -- core adaptation layer, 内核适配层，用于适配内核系统请求的模块，运行与用户态，只依赖libcmini。
4.libapi -- 应用程序接口，应用程序通过 api->cal->lpc->core service 调用系统功能，依赖libcal/libcmini。
5.core -- 系统内核，所有内核服务功能包含在此模块，依赖 libcmini/libcal。
6.arch -- 与CPU相关的功能模块，编译时与core一起生成目标文件。
7.board -- 与主板相关的功能模块，即BSP，提供主板支持的相关功能，编译时与core一起生成目标文件。
8.libfw -- 供应商固件sdk，由芯片供应商提供的MCU支持代码。
其他略...(只能2000字啊)

