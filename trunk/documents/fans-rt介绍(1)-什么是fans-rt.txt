fans-rt 是一个开源实时操作系统项目，纯属个人兴趣而开发。
svn地址:  http://code.taobao.org/svn/fans-rt

fans-rt 是一款硬实时操作系统，允许启用MPU和MMU对操作系统内核的保护功能，但不依赖于MPU和MMU。
一系统功能
1、任务管理(完成度90%)
提供抢占式任务管理，支持256级优先级，支持1024个任务同时运行，相同优先级采用轮转调度，不同优先级采用抢占调度，调度时间复杂度O1。任务管理提供至多3级位图(256bit)最少1级位图(8bit)描述就绪状态，调度时查表获得最高优先级的就绪任务。支持多种堆栈模型，包括全局内核堆栈、局部内核堆栈，在tiny模式下所有任务使用单堆栈运行，以节约内存空间，其他模式下普通任务采用双堆栈方式以便保护系统内核。
2、系统功能调用管理(完成度100%)
提供内核服务管理，所有内核服务均注册到服务软中断上，在中断上下文中完成服务功能，为减少服务所开销的CPU时间片保证系统实时性提高系统对中断的响应速度，所有内核服务均只提供原子化的单一功能，对于复杂的API调用由API层完成对系统功能的集成和组合，例如创建任务的API功能被划分为任务上下文对象分配、用户堆栈分配、用户堆栈初始化、内核堆栈分配、内核堆栈初始化、局部堆分配、局部变量管理对象分配等一系列原子化的步骤。
3、中断管理(100%)
提供至多256个中断管理，支持共享中断，支持中断优先级抢占。
4、内存管理(完成度50%)
内存采用2级管理，分为系统全局内存管理和应用全局堆管理、任务局部堆管理，系统全局内存管理由MMS服务完成，提供较大的页分配，支持最多8个Region，每个 Region最大64MB，最多可管理512MB内存，所有内存管理活动必须先通过MMS分配。应用全局堆管理由HMS提供，提供较小的块分配，所有任务共享全局堆，全局堆的管理数据和堆空间完全隔离，以防止应用程序缺陷导致问题扩散。局部堆为任务独享，局部堆的分配和释放均在应用层完成。系统支持tiny内存模型 (不编译全局内存管理模块)，内核最小内存需求3KB(1个IDLE任务，1个BOOT任务，以及1KB管理数据)。全局内存和堆的分配和释放均使用Buddy算法。
5、类和对象管理(完成度100%)
提供类和对象管理，允许驱动程序或其他内核模块向系统注册类。对象管理的内存分配采用2级索引方式，相同大小的对象使用一个对象容器(Container)进行管理，每个容器中有若干个池(POOL)，每个POOL中有若干个块(BLOCK)，容器描述符使用最大32BIT的位图描述BLOCK的空闲状态，分配时通过2次查表获得空闲块的ID。系统内核所使用的各种对象(例如任务上下文对象、IPC对象、堆栈对象、局部变量对象等)均由对象管理器统一管理。对象分为命名对象(唯一名称，不可重名)和无名对象。
6、IPC服务(完成度40%)
事件(100%) 互斥体(100%) 信号量(20%) 信号量集(20%) 管道FIFO(0%) 邮箱(0%) 消息队列(0%)
7、定时器(完成度0%)
提供内核和应用定时器，内核定时器在时钟中断中执行，应用定时器在实时任务中实现。
8、驱动和设备管理(完成度0%)
提供驱、总线和设备的管理，为单片机提供SPI和I2C总线的标准接口，解决I2C总线访问时序的位宽问题，提供图形设备访问的标准接口(X86演示版本上提供VESA支持，STM32提供FSMC支持)。
二、模块划分
1.libcmini -- libc基本库，提供无任何符号依赖的libc功能，可同时被内核态和用户态调用
2.libcuser -- libc扩展库，为应用程序提供扩展的libc功能，只允许用户态调用，依赖libcal/libcmini/libapi
3.libcal -- core adaptation layer, 内核适配层，用于适配内核系统请求的模块，运行与用户态，只依赖libcmini。
4.libapi -- 应用程序接口，应用程序通过 api->cal->lpc->core service 调用系统功能，依赖libcal/libcmini。
5.core -- 系统内核，所有内核服务功能包含在此模块，依赖 libcmini/libcal。
6.arch -- 与CPU相关的功能模块，编译时与core一起生成目标文件。
7.board -- 与主板相关的功能模块，即BSP，提供主板支持的相关功能，编译时与core一起生成目标文件。
8.libfw -- 供应商固件sdk，由芯片供应商提供的MCU支持代码。
其他略...(只能2000字啊)

