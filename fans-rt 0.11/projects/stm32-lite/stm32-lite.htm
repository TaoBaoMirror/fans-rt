<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\FANS-RT\Project\stm32-lite\stm32-lite.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\FANS-RT\Project\stm32-lite\stm32-lite.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Sat Nov 29 23:34:49 2014
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APP_Entry &rArr; FansMain &rArr; TastCase01 &rArr; CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6a]">APP_Entry</a> from lite-task.o(.text) referenced from lite-task.o(.constdata)
 <LI><a href="#[6b]">APP_Leave</a> from lite-task.o(.text) referenced from lite-task.o(.constdata)
 <LI><a href="#[44]">BSP_Entry</a> from stm32_bsp.o(.text) referenced from stm32_bsp.o(.constdata)
 <LI><a href="#[45]">BSP_Leave</a> from stm32_bsp.o(.text) referenced from stm32_bsp.o(.constdata)
 <LI><a href="#[4]">BusFault_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">DummyTask</a> from lite-task.o(.text) referenced from lite-task.o(.text)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">FansEntry</a> from cortex-m3.o(.text) referenced from loader.o(.constdata)
 <LI><a href="#[42]">HAL_Entry</a> from stm32hal.o(.text) referenced from stm32hal.o(.constdata)
 <LI><a href="#[43]">HAL_Leave</a> from stm32hal.o(.text) referenced from stm32hal.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">IdleTask</a> from tsscore.o(.text) referenced from tsscore.o(.text)
 <LI><a href="#[4f]">MMS_Entry</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[50]">MMS_Leave</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[8a]">MainEntry</a> from module.o(.text) referenced from module.o(.text)
 <LI><a href="#[3]">MemManage_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">RegisterModule</a> from module.o(.text) referenced from loader.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[58]">SVC_CancelTask</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[66]">SVC_EnumNextTask</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[4b]">SVC_FreePages</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[5e]">SVC_GetError</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[62]">SVC_GetLocalData</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[60]">SVC_GetPriority</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[65]">SVC_GetTaskInfor</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[5a]">SVC_GetTaskName</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[64]">SVC_GetTaskState</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[6]">SVC_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">SVC_InstallISR</a> from isr.o(.text) referenced from isr.o(.constdata)
 <LI><a href="#[40]">SVC_InstallLPC</a> from syscall.o(.text) referenced from syscall.o(.constdata)
 <LI><a href="#[4a]">SVC_NewRegion</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[48]">SVC_PageAlloc</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[49]">SVC_PageFree</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[51]">SVC_SchedulerRun</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[5f]">SVC_SetError</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[63]">SVC_SetLocalData</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[61]">SVC_SetPriority</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[4d]">SVC_ShowInfor</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[4e]">SVC_ShowSection</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[5d]">SVC_StackFree</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[5c]">SVC_StackMalloc</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[67]">SVC_SysProfiler</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[4c]">SVC_TakeInfor</a> from mms.o(.text) referenced from mms.o(.constdata)
 <LI><a href="#[56]">SVC_TaskAttach</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[5b]">SVC_TaskCurrent</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[57]">SVC_TaskDetach</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[55]">SVC_TaskFree</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[54]">SVC_TaskMalloc</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[52]">SVC_TaskSchedule</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[53]">SVC_TaskWakeup</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[59]">SVC_TestCancel</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[3f]">SVC_UnstallISR</a> from isr.o(.text) referenced from isr.o(.constdata)
 <LI><a href="#[41]">SVC_UnstallLPC</a> from syscall.o(.text) referenced from syscall.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">TASK_Main</a> from tsscall.o(.text) referenced from tsscall.o(.text)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[68]">TSS_Entry</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[69]">TSS_Leave</a> from tsscore.o(.text) referenced from tsscore.o(.constdata)
 <LI><a href="#[3a]">TestTask02</a> from lite-task.o(.text) referenced from lite-task.o(.text)
 <LI><a href="#[39]">TestTask03</a> from lite-task.o(.text) referenced from lite-task.o(.text)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32irq.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from cortex-m3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[3d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[141]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[91]"></a>CORE_TickHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[123]"></a>GetSystemTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Main
</UL>

<P><STRONG><a name="[6e]"></a>GetSystemClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[70]"></a>CLK_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLK_Start &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[72]"></a>WaitClock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GetTickCount
</UL>

<P><STRONG><a name="[74]"></a>CORE_Starting</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CORE_Starting &rArr; MDS_Start &rArr; CreatePriorityTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModule
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMS_Start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDS_Start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SchedulerRun
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansEntry
</UL>

<P><STRONG><a name="[7f]"></a>DEBUG_LevelString</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[7d]"></a>DEBUG_GetMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_ShowData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[150]"></a>DEBUG_EnableLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>DEBUG_DisableLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>DEBUG_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>DEBUG_WriteData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DEBUG_WriteData &rArr; FW_DebugWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DebugWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[71]"></a>DEBUG_Log</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_WriteData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_GetMask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_LevelString
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePool
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolMalloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskMalloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMS_Entry
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowManager
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEnumerateSections
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumerateSections
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeManagerInfor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRegion
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMMRegion
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_HandlerLPC
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallLPC
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterModule
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModule
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OMS_Start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Start
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskMalloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetCurrentTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMmsRegionSection
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMmsInformation
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMmsInformation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemFreePages
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase01
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase17
</UL>

<P><STRONG><a name="[83]"></a>DEBUG_Printf</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DEBUG_Printf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_WriteData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_GetMask
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Fault
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_ShowData
</UL>

<P><STRONG><a name="[84]"></a>DEBUG_ShowData</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DebugWriteByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_GetMask
</UL>

<P><STRONG><a name="[a1]"></a>CORE_HandlerIRQ</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CORE_HandlerIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>ISR_Start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ISR_Start &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_InstallLPC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[46]"></a>RegisterModule</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegisterModule &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loader.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ProbeModule</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProbeModule &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEntry
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[8a]"></a>MainEntry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MainEntry &rArr; ProbeModule &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>MDS_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MDS_Start &rArr; CreatePriorityTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[78]"></a>OMS_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OMS_Start &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[8f]"></a>CORE_HandlerLPC</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CORE_HandlerLPC &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetRequestID
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[75]"></a>LPC_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPC_Start &rArr; CORE_InstallLPC &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallLPC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[c9]"></a>CORE_GetIdleStackBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm-stack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerRun
</UL>

<P><STRONG><a name="[47]"></a>FansEntry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FansEntry &rArr; CORE_Starting &rArr; MDS_Start &rArr; CreatePriorityTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Starting
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loader.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SysTick_Handler &rArr; CORE_Scheduler &rArr; time_slice_handler &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Scheduler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_LeaveIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterIRQ
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SVC_Handler &rArr; CORE_HandlerLPC &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_LeaveIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_HandlerLPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HardFault_Handler &rArr; HAL_Fault &rArr; DEBUG_Printf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Fault
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_LeaveIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>USART_Start</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32bug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Start &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Starting
</UL>

<P><STRONG><a name="[9e]"></a>HALBUG_StartSend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32bug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>

<P><STRONG><a name="[95]"></a>HAL_Fault</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Fault &rArr; DEBUG_Printf &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[90]"></a>STM32_Starting</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STM32_Starting &rArr; USART_Start &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansEntry
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; CORE_HandlerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_HandlerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>LDR_LoadModule</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, loader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LDR_LoadModule &rArr; Find_Module &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>LDR_FindSymbol</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LDR_FindSymbol &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>LDR_LoadFile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; LDR_LoadModule &rArr; Find_Module &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_LoadFile
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_FindSymbol
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_LoadModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bb]"></a>CORE_PageAlloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CORE_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePool
</UL>

<P><STRONG><a name="[bc]"></a>CORE_PageFree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
</UL>

<P><STRONG><a name="[93]"></a>CORE_Scheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CORE_Scheduler &rArr; time_slice_handler &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c6]"></a>TSS_GetIdleContext</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_GetIdleContext
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_NEXT_NODE
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_EnumNextTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SystemProfiler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerRun
</UL>

<P><STRONG><a name="[c8]"></a>TSS_SchedulerRun</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSS_SchedulerRun &rArr; FW_FillStack
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_FillStack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetIdleContext
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetIdleStackBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SchedulerRun
</UL>

<P><STRONG><a name="[e0]"></a>TSS_EnumNextContext</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_EnumNextContext
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_EnumNextTask
</UL>

<P><STRONG><a name="[cb]"></a>TSS_SystemProfiler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSS_SystemProfiler &rArr; TSS_GetIdleContext
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetIdleContext
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SysProfiler
</UL>

<P><STRONG><a name="[cc]"></a>CORE_TaskAttach</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CORE_TaskAttach &rArr; set_task_suspend &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_INSERT_PREV
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskAttach
</UL>

<P><STRONG><a name="[cd]"></a>CORE_TaskDetach</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CORE_TaskDetach &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrReadyBitmap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_INSERT_PREV
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskDetach
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterIRQ
</UL>

<P><STRONG><a name="[ce]"></a>CORE_TaskSuspend</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CORE_TaskSuspend &rArr; set_task_suspend &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskSchedule
</UL>

<P><STRONG><a name="[cf]"></a>CORE_TaskWakeup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CORE_TaskWakeup &rArr; set_task_ready &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskWakeup
</UL>

<P><STRONG><a name="[d0]"></a>CORE_SetTaskCurrentPriority</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CORE_SetTaskCurrentPriority &rArr; set_task_ready &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_ResetTaskCurrentPriority
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskAllPriority
</UL>

<P><STRONG><a name="[d1]"></a>CORE_SetTaskAllPriority</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CORE_SetTaskAllPriority &rArr; CORE_SetTaskCurrentPriority &rArr; set_task_ready &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SetPriority
</UL>

<P><STRONG><a name="[d2]"></a>CORE_ResetTaskCurrentPriority</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>

<P><STRONG><a name="[d3]"></a>CORE_GetDetachTask</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CORE_GetDetachTask
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskMalloc
</UL>

<P><STRONG><a name="[d4]"></a>CORE_SetError</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CORE_SetError
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_EnumNextTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SetError
</UL>

<P><STRONG><a name="[d5]"></a>CORE_GetError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CORE_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetError
</UL>

<P><STRONG><a name="[9f]"></a>CORE_GetCurrentTask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetTaskInfor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SetLocalData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetLocalData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SetPriority
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_StackFree
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskCurrent
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetTaskName
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TestCancel
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_CancelTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Fault
</UL>

<P><STRONG><a name="[92]"></a>CORE_EnterIRQ</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CORE_EnterIRQ &rArr; CORE_TaskDetach &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackOverflowCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>CORE_LeaveIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CORE_LeaveIRQ &rArr; task_scheduling
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduling
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d8]"></a>TSS_SchedulerOpenIRQ</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_SchedulerOpenIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
</UL>

<P><STRONG><a name="[d9]"></a>TSS_SchedulerCreate</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSS_SchedulerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
</UL>

<P><STRONG><a name="[e5]"></a>CORE_CreatePoolManager</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CORE_CreatePoolManager
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
</UL>

<P><STRONG><a name="[de]"></a>CORE_PoolMalloc</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CORE_PoolMalloc &rArr; CreatePool &rArr; CORE_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePool
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetSingleID
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_StackMalloc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskMalloc
</UL>

<P><STRONG><a name="[df]"></a>CORE_PoolFree</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CORE_PoolFree &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_StackFree
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskFree
</UL>

<P><STRONG><a name="[dc]"></a>CORE_Handle2Header</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetTaskInfor
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_EnumNextTask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetTaskState
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetPriority
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_StackFree
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_StackMalloc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_GetTaskName
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskDetach
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_CancelTask
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskAttach
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskFree
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskWakeup
</UL>

<P><STRONG><a name="[dd]"></a>CORE_UpdateSingleID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CORE_UpdateSingleID
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetSingleID
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskMalloc
</UL>

<P><STRONG><a name="[f4]"></a>FansMain</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = FansMain &rArr; TastCase01 &rArr; CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase01
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase02
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase03
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase17
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Entry
</UL>

<P><STRONG><a name="[f5]"></a>SysCall</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, coreapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SystemCall
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SystemProfiler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMMRegion
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_InstallLPC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SchedulerRun
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_StackFree
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_StackMalloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskAttach
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskFree
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskMalloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TestCancel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskWakeup
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskDetach
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskCancel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetPriority
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetLocalData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetError
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_ScheduleTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskName
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskInfor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetPriority
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetLocalData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetError
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetCurrentTask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_EnumNextTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMmsRegionSection
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMmsInformation
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMmsInformation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemFreePages
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFree
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageMalloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_UnstallIRQ
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_InstallIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_UnstallLPC
</UL>

<P><STRONG><a name="[88]"></a>CALL_InstallLPC</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, coreapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_InstallLPC &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMS_Entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Start
</UL>

<P><STRONG><a name="[f7]"></a>CALL_UnstallLPC</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, coreapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[f8]"></a>CALL_InstallIRQ</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, coreapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[f9]"></a>CALL_UnstallIRQ</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, coreapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[fa]"></a>PageMalloc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[fb]"></a>PageFree</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[fc]"></a>GetSystemFreePages</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[fe]"></a>GetMmsInformation</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[ff]"></a>ShowMmsInformation</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[100]"></a>ShowMmsRegionSection</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, mmsapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[a2]"></a>CreateMMRegion</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, mmsapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CreateMMRegion &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Entry
</UL>

<P><STRONG><a name="[f0]"></a>CreateTaskEx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CreateTaskEx &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase03
</UL>

<P><STRONG><a name="[8b]"></a>CreatePriorityTask</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CreatePriorityTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreatePriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDS_Start
</UL>

<P><STRONG><a name="[f2]"></a>CreateTask</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreatePriorityTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase01
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase02
</UL>

<P><STRONG><a name="[102]"></a>KillTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskDetach
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskExit
</UL>

<P><STRONG><a name="[104]"></a>TaskExit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillTask
</UL>

<P><STRONG><a name="[ed]"></a>Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sleep &rArr; CALL_ScheduleTimeout &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_ScheduleTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase01
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask02
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask03
</UL>

<P><STRONG><a name="[106]"></a>TaskStartup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskWakeup
</UL>

<P><STRONG><a name="[fd]"></a>SetError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetError &rArr; CALL_SetError &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetError
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskMalloc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetCurrentTask
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemFreePages
</UL>

<P><STRONG><a name="[109]"></a>GetError</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetError
</UL>

<P><STRONG><a name="[10b]"></a>CancelTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskCancel
</UL>

<P><STRONG><a name="[e4]"></a>TestCancel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TestCancel &rArr; CALL_TestCancel &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TestCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask02
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask03
</UL>

<P><STRONG><a name="[ee]"></a>GetTaskName</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetTaskName &rArr; CALL_GetTaskName &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskName
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask02
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask03
</UL>

<P><STRONG><a name="[e1]"></a>GetCurrentTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetCurrentTask
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask02
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask03
</UL>

<P><STRONG><a name="[111]"></a>SetTaskPriority</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetPriority
</UL>

<P><STRONG><a name="[113]"></a>GetTaskPriority</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetPriority
</UL>

<P><STRONG><a name="[115]"></a>GetTaskLocalData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetLocalData
</UL>

<P><STRONG><a name="[117]"></a>SetTaskLocalData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetLocalData
</UL>

<P><STRONG><a name="[119]"></a>GetTaskState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskState
</UL>

<P><STRONG><a name="[ea]"></a>GetTaskInformation</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetTaskInformation &rArr; CALL_GetTaskInfor &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskInfor
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase17
</UL>

<P><STRONG><a name="[eb]"></a>EnumerationNextTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tssapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EnumerationNextTask &rArr; CALL_EnumNextTask &rArr; CALL_SetError &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_EnumNextTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase17
</UL>

<P><STRONG><a name="[7a]"></a>CALL_SchedulerRun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CALL_SchedulerRun &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Starting
</UL>

<P><STRONG><a name="[105]"></a>CALL_ScheduleTimeout</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_ScheduleTimeout &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
</UL>

<P><STRONG><a name="[107]"></a>CALL_TaskWakeup</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStartup
</UL>

<P><STRONG><a name="[11d]"></a>CALL_TaskMalloc</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CALL_TaskMalloc &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[11e]"></a>CALL_TaskFree</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_TaskFree &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[11f]"></a>CALL_TaskAttach</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_TaskAttach &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[103]"></a>CALL_TaskDetach</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_TaskDetach &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillTask
</UL>

<P><STRONG><a name="[10d]"></a>CALL_TestCancel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CALL_TestCancel &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCancel
</UL>

<P><STRONG><a name="[10c]"></a>CALL_TaskCancel</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelTask
</UL>

<P><STRONG><a name="[10e]"></a>CALL_GetTaskName</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CALL_GetTaskName &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskName
</UL>

<P><STRONG><a name="[110]"></a>CALL_GetCurrentTask</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTask
</UL>

<P><STRONG><a name="[120]"></a>CALL_StackMalloc</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CALL_StackMalloc &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[121]"></a>CALL_StackFree</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_StackFree &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[10a]"></a>CALL_GetError</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetError
</UL>

<P><STRONG><a name="[108]"></a>CALL_SetError</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALL_SetError &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_GetTaskState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_EnumNextTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
</UL>

<P><STRONG><a name="[114]"></a>CALL_GetPriority</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskPriority
</UL>

<P><STRONG><a name="[112]"></a>CALL_SetPriority</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTaskPriority
</UL>

<P><STRONG><a name="[116]"></a>CALL_GetLocalData</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskLocalData
</UL>

<P><STRONG><a name="[118]"></a>CALL_SetLocalData</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTaskLocalData
</UL>

<P><STRONG><a name="[11a]"></a>CALL_GetTaskState</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetError
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskState
</UL>

<P><STRONG><a name="[11b]"></a>CALL_GetTaskInfor</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CALL_GetTaskInfor &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskInformation
</UL>

<P><STRONG><a name="[11c]"></a>CALL_EnumNextTask</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CALL_EnumNextTask &rArr; CALL_SetError &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SetError
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumerationNextTask
</UL>

<P><STRONG><a name="[e2]"></a>CALL_SystemProfiler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CALL_SystemProfiler &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
</UL>

<P><STRONG><a name="[122]"></a>ChooseName</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChooseName &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
</UL>

<P><STRONG><a name="[e6]"></a>CALL_CreateTaskEx</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChooseName
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreatePriorityTask
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskEx
</UL>

<P><STRONG><a name="[101]"></a>CALL_CreatePriorityTask</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePriorityTask
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>

<P><STRONG><a name="[127]"></a>CALL_CreateTask</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tsscall.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreatePriorityTask
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Starting
</UL>

<P><STRONG><a name="[9b]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[153]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[12a]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[99]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[156]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[12b]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[167]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[177]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[178]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[12d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[179]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[9a]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[17f]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[9c]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALBUG_StartSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Start
</UL>

<P><STRONG><a name="[182]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DebugWriteByte
</UL>

<P><STRONG><a name="[188]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DebugWriteByte
</UL>

<P><STRONG><a name="[193]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Starting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>FW_SystemCall</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCall
</UL>

<P><STRONG><a name="[197]"></a>FW_TaskSwitch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cortex-m3.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>FW_GetStackPoint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[131]"></a>FW_SystemHang</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex-m3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SystemHang
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SystemHang
</UL>

<P><STRONG><a name="[198]"></a>FW_SaveIRQFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortex-m3.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>FW_DisableIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskSchedule
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerOpenIRQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetError
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetDetachTask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_ResetTaskCurrentPriority
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskAllPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskWakeup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SystemProfiler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UnstallISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallISR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_ShowData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[82]"></a>FW_RestoreIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TaskSchedule
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerOpenIRQ
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetError
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetDetachTask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_ResetTaskCurrentPriority
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskAllPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskWakeup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SystemProfiler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UnstallISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallISR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_ShowData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[199]"></a>FW_EnableIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cortex-m3.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>FW_SystemIdle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex-m3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleTask
</UL>

<P><STRONG><a name="[19a]"></a>FW_InterLockedExchangeForUser</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cortex-m3.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>FW_GetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, libfw-m3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitClock
</UL>

<P><STRONG><a name="[19b]"></a>FW_GetTickBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, libfw-m3.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>FW_FillStack</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, libfw-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_FillStack
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerRun
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskHandle
</UL>

<P><STRONG><a name="[7c]"></a>FW_DebugWriteByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libfw-m3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FW_DebugWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_ShowData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_WriteData
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemClock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePageTable
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_CreatePoolManager
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_Entry
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreatePriorityTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase03
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCase17
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskName
</UL>

<P><STRONG><a name="[89]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_FindSymbol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Module
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterModule
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProbeModule
</UL>

<P><STRONG><a name="[ec]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask02
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask03
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13a]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[142]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a7]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[80]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChooseName
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TastCase01
</UL>

<P><STRONG><a name="[1a8]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a9]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[144]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ab]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ac]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[81]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Printf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[86]"></a>CORE_FindService</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CORE_FindService
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallISR
</UL>

<P><STRONG><a name="[85]"></a>CORE_InstallISR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CORE_InstallISR &rArr; CORE_FindService
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_FindService
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_InstallISR
</UL>

<P><STRONG><a name="[87]"></a>CORE_UnstallISR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CORE_UnstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_UnstallISR
</UL>

<P><STRONG><a name="[3e]"></a>SVC_InstallISR</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SVC_InstallISR &rArr; CORE_InstallISR &rArr; CORE_FindService
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>SVC_UnstallISR</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SVC_UnstallISR &rArr; CORE_UnstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UnstallISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>CORE_InstallLPC</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CORE_InstallLPC &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetRequestID
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_InstallLPC
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC_Start
</UL>

<P><STRONG><a name="[8e]"></a>CORE_UnstallLPC</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CORE_UnstallLPC
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetRequestID
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_UnstallLPC
</UL>

<P><STRONG><a name="[40]"></a>SVC_InstallLPC</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SVC_InstallLPC &rArr; CORE_InstallLPC &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallLPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscall.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>SVC_UnstallLPC</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, syscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SVC_UnstallLPC &rArr; CORE_UnstallLPC
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UnstallLPC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscall.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>CORE_GetRequestID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscall.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_HandlerLPC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UnstallLPC
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_InstallLPC
</UL>

<P><STRONG><a name="[42]"></a>HAL_Entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32hal.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>HAL_Leave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>BSP_Entry</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32_bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_Entry &rArr; CreateMMRegion &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateMMRegion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_bsp.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>BSP_Leave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_bsp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32_bsp.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>Find_Module</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, loader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Find_Module &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_LoadModule
</UL>

<P><STRONG><a name="[a7]"></a>GetWordLowestBit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetWordLowestBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteLowestBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSplitBuddy
</UL>

<P><STRONG><a name="[a9]"></a>GetWordHighestBit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetWordHighestBit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteHighestBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSplitBuddy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagesBuddy
</UL>

<P><STRONG><a name="[ab]"></a>GetPagesBuddy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPagesBuddy &rArr; GetWordHighestBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordHighestBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuddyMergeSection
</UL>

<P><STRONG><a name="[ac]"></a>GetSplitBuddy</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetSplitBuddy &rArr; GetWordHighestBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordHighestBit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordLowestBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePageTable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
</UL>

<P><STRONG><a name="[af]"></a>RegionDelSection</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionDelSection
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
</UL>

<P><STRONG><a name="[ad]"></a>BuddyMergeSection</STRONG> (Thumb, 896 bytes, Stack size 40 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BuddyMergeSection &rArr; GetPagesBuddy &rArr; GetWordHighestBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagesBuddy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
</UL>

<P><STRONG><a name="[ae]"></a>PageFreeAddress</STRONG> (Thumb, 826 bytes, Stack size 56 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PageFreeAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuddyMergeSection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDelSection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSplitBuddy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PageFree
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_PageFree
</UL>

<P><STRONG><a name="[b0]"></a>PageAllocAddress</STRONG> (Thumb, 1508 bytes, Stack size 64 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSplitBuddy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagesBuddy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordLowestBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PageAlloc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_PageAlloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePageTable
</UL>

<P><STRONG><a name="[b5]"></a>FreePagesQuery</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FreePagesQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_FreePages
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeManagerInfor
</UL>

<P><STRONG><a name="[b1]"></a>CreatePageTable</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CreatePageTable &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSplitBuddy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRegion
</UL>

<P><STRONG><a name="[b3]"></a>CreateRegion</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CreateRegion &rArr; CreatePageTable &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatePageTable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_NewRegion
</UL>

<P><STRONG><a name="[b6]"></a>GetBuddySectionCount</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBuddySectionCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeManagerInfor
</UL>

<P><STRONG><a name="[b4]"></a>TakeManagerInfor</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TakeManagerInfor &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuddySectionCount
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePagesQuery
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_TakeInfor
</UL>

<P><STRONG><a name="[b7]"></a>EnumerateSections</STRONG> (Thumb, 404 bytes, Stack size 112 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EnumerateSections &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBooleanString
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEnumerateSections
</UL>

<P><STRONG><a name="[b9]"></a>RegionEnumerateSections</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RegionEnumerateSections &rArr; EnumerateSections &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumerateSections
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_ShowSection
</UL>

<P><STRONG><a name="[ba]"></a>ShowManager</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ShowManager &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_ShowInfor
</UL>

<P><STRONG><a name="[48]"></a>SVC_PageAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SVC_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageAllocAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>SVC_PageFree</STRONG> (Thumb, 788 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SVC_PageFree &rArr; PageFreeAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFreeAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>SVC_FreePages</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_FreePages &rArr; FreePagesQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreePagesQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>SVC_NewRegion</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SVC_NewRegion &rArr; CreateRegion &rArr; CreatePageTable &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRegion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>SVC_TakeInfor</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SVC_TakeInfor &rArr; TakeManagerInfor &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeManagerInfor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>SVC_ShowInfor</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SVC_ShowInfor &rArr; ShowManager &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowManager
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>SVC_ShowSection</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SVC_ShowSection &rArr; RegionEnumerateSections &rArr; EnumerateSections &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEnumerateSections
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>MMS_Entry</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MMS_Entry &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_InstallLPC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>MMS_Leave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mms.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>GetByteHighestBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mms.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordHighestBit
</UL>

<P><STRONG><a name="[a8]"></a>GetByteLowestBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mms.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWordLowestBit
</UL>

<P><STRONG><a name="[b8]"></a>GetBooleanString</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, mms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBooleanString
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumerateSections
</UL>

<P><STRONG><a name="[bf]"></a>LIST_INSERT_PREV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_slice_finish
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
</UL>

<P><STRONG><a name="[be]"></a>LIST_REMOVE_NODE</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetDetachTask
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_slice_finish
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
</UL>

<P><STRONG><a name="[d6]"></a>StackOverflowCheck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StackOverflowCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterIRQ
</UL>

<P><STRONG><a name="[c0]"></a>SetReadyBitmap</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetReadyBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_slice_finish
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
</UL>

<P><STRONG><a name="[c3]"></a>ClrReadyBitmap</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ClrReadyBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
</UL>

<P><STRONG><a name="[bd]"></a>set_task_ready</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_task_ready &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReadyBitmap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_INSERT_PREV
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskCurrentPriority
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskWakeup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume_handler
</UL>

<P><STRONG><a name="[c1]"></a>task_slice_finish</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_slice_finish &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReadyBitmap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_INSERT_PREV
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
</UL>

<P><STRONG><a name="[c2]"></a>set_task_suspend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_task_suspend &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrReadyBitmap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_REMOVE_NODE
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_INSERT_PREV
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskSuspend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_handler
</UL>

<P><STRONG><a name="[c4]"></a>task_resume_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = task_resume_handler &rArr; set_task_ready &rArr; SetReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_ready
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Scheduler
</UL>

<P><STRONG><a name="[c5]"></a>time_slice_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = time_slice_handler &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_task_suspend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_slice_finish
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Scheduler
</UL>

<P><STRONG><a name="[c7]"></a>LIST_NEXT_NODE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetIdleContext
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduling
</UL>

<P><STRONG><a name="[d7]"></a>task_scheduling</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = task_scheduling
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByteLowestBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_NEXT_NODE
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_LeaveIRQ
</UL>

<P><STRONG><a name="[db]"></a>GetByteLowestBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduling
</UL>

<P><STRONG><a name="[51]"></a>SVC_SchedulerRun</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SVC_SchedulerRun &rArr; TSS_SchedulerRun &rArr; FW_FillStack
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>SVC_TaskSchedule</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SVC_TaskSchedule &rArr; CORE_TaskSuspend &rArr; set_task_suspend &rArr; ClrReadyBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskSuspend
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_RestoreIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>SVC_TaskWakeup</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_TaskWakeup &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskWakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>SVC_SetError</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SVC_SetError &rArr; CORE_SetError
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>SVC_GetError</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SVC_GetError &rArr; CORE_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>SVC_TaskMalloc</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SVC_TaskMalloc &rArr; CORE_PoolMalloc &rArr; CreatePool &rArr; CORE_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UpdateSingleID
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolMalloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetDetachTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>SVC_TaskFree</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_TaskFree &rArr; CORE_PoolFree &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>SVC_TaskAttach</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_TaskAttach &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskAttach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>SVC_CancelTask</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_CancelTask &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>SVC_TestCancel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SVC_TestCancel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>SVC_TaskDetach</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_TaskDetach &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_TaskDetach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>SVC_GetTaskName</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_GetTaskName &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>SVC_TaskCurrent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_TaskCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>SVC_StackMalloc</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SVC_StackMalloc &rArr; CORE_PoolMalloc &rArr; CreatePool &rArr; CORE_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolMalloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>SVC_StackFree</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SVC_StackFree &rArr; CORE_PoolFree &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolFree
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>SVC_GetPriority</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_GetPriority &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>SVC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_SetPriority &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetTaskAllPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>SVC_GetLocalData</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_GetLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>SVC_SetLocalData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVC_SetLocalData
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>SVC_GetTaskState</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_GetTaskState &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SVC_EnumNextTask</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SVC_EnumNextTask &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_SetError
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_EnumNextContext
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_GetIdleContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>SVC_GetTaskInfor</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SVC_GetTaskInfor &rArr; CORE_Handle2Header &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_Handle2Header
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_GetCurrentTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SVC_SysProfiler</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SVC_SysProfiler &rArr; TSS_SystemProfiler &rArr; TSS_GetIdleContext
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SystemProfiler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>IdleTask</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IdleTask &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCancel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_SystemIdle
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_SystemProfiler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>TSS_Entry</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, tsscore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TSS_Entry &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_CreatePoolManager
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerCreate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSS_SchedulerOpenIRQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_InstallLPC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>TSS_Leave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsscore.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tsscore.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>CORE_GetSingleID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libpool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_UpdateSingleID
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolMalloc
</UL>

<P><STRONG><a name="[e7]"></a>CreatePool</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, libpool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CreatePool &rArr; CORE_PageAlloc &rArr; PageAllocAddress &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PageAlloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_PoolMalloc
</UL>

<P><STRONG><a name="[e9]"></a>TestCase17</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TestCase17 &rArr; EnumerationNextTask &rArr; CALL_EnumNextTask &rArr; CALL_SetError &rArr; SysCall
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskInformation
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumerationNextTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
</UL>

<P><STRONG><a name="[39]"></a>TestTask03</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestTask03 &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCancel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lite-task.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>TastCase03</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TastCase03 &rArr; CreateTaskEx &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
</UL>

<P><STRONG><a name="[3a]"></a>TestTask02</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestTask02 &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCancel
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaskName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lite-task.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>TastCase02</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TastCase02 &rArr; CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
</UL>

<P><STRONG><a name="[3b]"></a>DummyTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lite-task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lite-task.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>TastCase01</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TastCase01 &rArr; CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
</UL>

<P><STRONG><a name="[6a]"></a>APP_Entry</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lite-task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = APP_Entry &rArr; FansMain &rArr; TastCase01 &rArr; CreateTask &rArr; CALL_CreatePriorityTask &rArr; CALL_CreateTaskEx &rArr; CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FansMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lite-task.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>APP_Leave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lite-task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lite-task.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>TASK_Main</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TASK_Main &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskDetach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsscall.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>CreateTaskHandle</STRONG> (Thumb, 818 bytes, Stack size 56 bytes, tsscall.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CreateTaskHandle &rArr; GetCurrentTask &rArr; CALL_GetCurrentTask &rArr; DEBUG_Log &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_FillStack
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Log
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_GetStackPoint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_StackFree
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_StackMalloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskAttach
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskFree
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_TaskMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_CreateTaskEx
</UL>

<P><STRONG><a name="[130]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[12f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[145]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[143]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[148]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[147]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
